server {
  ssl_certificate /opt/conjur/etc/ssl/cert/tls.crt;
  ssl_certificate_key /tmp/tls.key;

  ssl_client_certificate /opt/conjur/etc/ssl/ca/tls.crt;

  ssl_verify_client optional_no_ca;

  listen 9443 ssl;
  listen [::]:9443 ssl;

  proxy_set_header Conjur-Forwarded-Host $http_host;
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_set_header X-Real_IP $remote_Addr;
  proxy_set_header X-Forwarded_For $proxy_add_x_forwarded_for;
  proxy_set_header X-SSL-Client-Certificate $ssl_client_escaped_cert;

  # The rewrites in this location strip off the leading /api, and ensure
  # that the URL sent to the upstream is *not* URL decoded.
  #
  # Having it remain URL-encoded is important, because Conjur ids can
  # have embedded slashes in them. Those slashes need to be passed to
  # the upstream as '%2F', not as '/'.
  #
  # See https://stackoverflow.com/a/37584637 For a discussion of the rewrite gymnastics.
  location /api/ {
    rewrite ^ $request_uri;
    rewrite ^/api(/.*) $1; break;
    return 400;
    proxy_pass http://127.0.0.1:8080$uri;
  }

  # Forward decrypted traffic to Conjur.
  location / {
    # Do not be tempted to put a trailing slash on the URL below. If you
    # do, the URL sent to the upstream will be URL-decoded.
    proxy_pass http://127.0.0.1:8080;
  }

  # Hard-coded 200 to account for evoke no longer serving a /health endpoint.
  location /status {
    access_log off;
    return 200 'OK';
  }

  # Info endpoint
  location /info {
    access_log off;
    rewrite /info/?(.*) /$1 break;
    proxy_pass http://127.0.0.1:5611;
  }
}

server {
  # Redirect outside unencrypted access to https.
  listen 9000;
  listen [::]:9000;
  return 301 https://$host$request_uri;
}
